name: Automatización de scraping web

on:
  schedule:
    - cron: '0 0 * * 1' # Ejecutar todos los lunes
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      DESTINATARIO_EMAIL: ${{ secrets.DESTINATARIO_EMAIL }}

    steps:
    # Clonar el repositorio
    - name: Clonar el repositorio
      run: |
        git clone https://github.com/RickyFer22/Web-Scraping-Automatizado-para-la-Vigilancia-de-Competidores.git .
        git checkout ${{ github.ref }}

    # Instalar dependencias
    - name: Instalar dependencias
      run: pip install -r requirements.txt

    # Instalar Google Chrome
    - name: Instalar Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    # Verificar instalación de Chrome
    - name: Verificar instalación de Chrome
      run: google-chrome --version

    # Descargar ChromeDriver
    - name: Descargar ChromeDriver
      run: |
        CHROME_DRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
        wget https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        chmod +x chromedriver
        sudo mv chromedriver /usr/local/bin/

    # Verificar instalación de ChromeDriver
    - name: Verificar instalación de ChromeDriver
      run: chromedriver --version

    # Configurar Xvfb para entorno sin pantalla
    - name: Configurar Xvfb
      run: |
        sudo apt-get install -y xvfb
        Xvfb :99 &
        export DISPLAY=:99.0

    # Ejecutar scripts de scraping
    - name: Ejecutar scripts de scraping
      run: |
        for file in *.py; do
          if [ -f "$file" ]; then
            python "$file"
          fi
        done

    # Generar Excel de resultados
    - name: Generar y guardar Excel
      run: python 6listas_en_excel.py

    # Enviar el archivo Excel por correo electrónico
    - name: Enviar resultados por correo
      env:
        EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        DESTINATARIO_EMAIL: ${{ secrets.DESTINATARIO_EMAIL }}
      run: |
        python - <<EOF
        import smtplib
        from email.mime.multipart import MIMEMultipart
        from email.mime.base import MIMEBase
        from email import encoders

        # Configuración del correo
        email_address = "${{ secrets.EMAIL_ADDRESS }}"
        email_password = "${{ secrets.EMAIL_PASSWORD }}"
        destinatario = "${{ secrets.DESTINATARIO_EMAIL }}"
        asunto = "Resultados de Scraping"
        mensaje = "Se adjuntan los resultados del scraping en formato Excel."

        # Crear el mensaje
        msg = MIMEMultipart()
        msg['From'] = email_address
        msg['To'] = destinatario
        msg['Subject'] = asunto
        msg.attach(MIMEBase('application', 'octet-stream'))

        # Adjuntar archivo
        archivo = "precios_competencia.xlsx"
        with open(archivo, 'rb') as adj:
            parte = MIMEBase('application', 'octet-stream')
            parte.set_payload(adj.read())
        encoders.encode_base64(parte)
        parte.add_header('Content-Disposition', f'attachment; filename={archivo}')
        msg.attach(parte)

        # Enviar correo
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(email_address, email_password)
            server.sendmail(email_address, destinatario, msg.as_string())
        EOF



